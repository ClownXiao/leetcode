/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    
    public Stack<TreeNode> st;
    public BSTIterator(TreeNode root) {
        st = new Stack<TreeNode>();
        travel(root);
    }
    
    public void travel(TreeNode t){
        while(t != null){
            st.push(t);
            t = t.left;
        }
        return;
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return st.size() != 0;
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode x = st.pop();
        travel(x.right);
        return x.val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */