public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        boolean[] b = new boolean[nums.length];
        Arrays.fill(b, false);
        per(res, nums, new ArrayList<Integer>(), b);
        return res;
    }
    
    public void per(List<List<Integer>> res, int[] a, List<Integer> l, boolean[] b){
        
        if(l.size() == a.length){
            res.add(new ArrayList<Integer>(l));
            return;
        }
        for(int i = 0; i < a.length; ++i){
            if(i > 0 && a[i] == a[i-1] && !b[i-1]) continue;
            if(!b[i]){
                l.add(a[i]);
                b[i] = true;
                //System.out.println(i + ": occupy  " + a[i]);
                per(res, a, l, b);
                l.remove(l.size() - 1);
                b[i] = false;
                //System.out.println(i + ": free  " + a[i]);
            }
        }
        return;
    }
}