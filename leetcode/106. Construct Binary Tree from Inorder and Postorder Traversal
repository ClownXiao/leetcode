/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

/*
        1
    2       3
4       6       7
421637
426731
*/

public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
        
        return travel(postorder.length - 1, 0, inorder.length - 1, inorder, postorder, map);
    }
    
    public TreeNode travel(int poststart, int instart, int inend, int[] inorder, int[] postorder, HashMap<Integer, Integer> map){
        if(poststart < 0 || instart > inend) return null;
        int val = postorder[poststart];
        int next = map.get(val);
        TreeNode node = new TreeNode(val);
        node.right = travel(poststart - 1, next + 1, inend, inorder, postorder, map);
        node.left = travel(poststart - (inend - next + 1), instart, next - 1, inorder, postorder, map);
        return node;
    }
}