class Solution {
    public boolean validTree(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++)
            adj.add(new  ArrayList<>());
        
        for(int[] edge: edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        
        boolean[] visit = new boolean[n];
        if(hascycle(adj, 0, visit, 0))
            return false;
        
        for(int i = 0; i < n; i++)
            if(visit[i] == false)
                return false;
        
        return true;
        
        
        
    }
    
    public boolean hascycle(List<List<Integer>> adj, int cur, boolean[] visit, int parent){
        visit[cur] = true;
        List<Integer> neigh = adj.get(cur);
        for(int i = 0; i < neigh.size(); i++){
            int next = neigh.get(i);
            if(next != parent){
                if(visit[next])
                    return true;
                else if(hascycle(adj, next, visit, cur))
                    return true;
            }
            
        }
        return false;
    }
    
}