/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> res = new LinkedList<>();
        for(int i = 0; i < intervals.size(); i++ ){
            if(newInterval.start > intervals.get(i).end)
                res.add(intervals.get(i));
            else{
                int min = Math.min(intervals.get(i).start, newInterval.start);
                if(newInterval.end < intervals.get(i).start){
                    res.add(newInterval);
                    res.add(intervals.get(i));
                }
                else{
                    int max = Math.max(intervals.get(i).end, newInterval.end);
                    while(i < intervals.size() && intervals.get(i).end < max) i++;
                    if(i < intervals.size()){
                        if(intervals.get(i).start > max)
                            i--;
                        else
                             max = intervals.get(i).end;
                    }
                    res.add(new Interval(min, max));
                }
                while(++i < intervals.size()){
                    res.add(intervals.get(i));
                }
                return res;
            }
        }
        res.add(newInterval);
        return res;
    }
}