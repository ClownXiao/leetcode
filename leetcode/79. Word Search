class Solution {
    
    int[] ii = {0, 0, 1, -1};
    int[] jj = {1, -1, 0, 0};
    
    public boolean exist(char[][] board, String word) {
        int m = board.length;
        if(m == 0) return false;
        int n = board[0].length;
        boolean[][] visit = new boolean[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == word.charAt(0))
                    if(dfs(visit, board, word, 1, m, n, i, j)) return true;
            }
        }
        return false;
    }
    
    public boolean dfs(boolean[][] visit, char[][] board, String word, int pos, int m, int n, int i, int j){
        if(pos == word.length()) return true;
        visit[i][j] = true;
        char target = word.charAt(pos);
        for(int k = 0; k < 4; k++){
            int x = i + ii[k];
            int y = j + jj[k];
            if(x < 0 || x >= m || y < 0 || y >= n || visit[x][y] || board[x][y] != target) continue;
            if( dfs(visit, board, word, pos + 1, m, n, x, y)) return true;
        }
        visit[i][j] = false;
        return false;
    }
}