public class Solution {
    // 0 1 1 2 2 3
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        boolean[][] dp = new boolean[numCourses][numCourses];
        int[] indegree = new int[numCourses];
        for(int[] dep: prerequisites){
            if(!dp[dep[0]][dep[1]])
                indegree[dep[0]]++;
            dp[dep[0]][dep[1]] = true;
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0)
                q.offer(i);
        }
        int c = 0;
        while(!q.isEmpty()){
            int cur = q.poll();
            c++;
            for(int i = 0; i < numCourses; i++){
                if(dp[i][cur])
                    if(--indegree[i] == 0)
                        q.offer(i);
            }
        }
        return c == numCourses;
    }
}