/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int left = 1;
    int right = 0;
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        if(root == null) return res;
        Queue<TreeNode> q = new LinkedList<>();
        Queue<Integer> n = new LinkedList<>();
        q.offer(root);
        n.offer(0);
        while(!q.isEmpty()){
            TreeNode cur = q.poll();
            int curLevel = n.poll();
            travel(res, cur, curLevel);
            if(cur.left != null){
                q.offer(cur.left);
                n.offer(curLevel - 1);
            }
            if(cur.right != null){
                q.offer(cur.right);
                n.offer(curLevel + 1);
            }
            
        }
        return res;
    }
    
    public void travel(List<List<Integer>> res, TreeNode root, int pos){
        if(root == null) return;
        if(pos < left){
            left = pos;
            res.add(0, new ArrayList<>());
        }
        else if(pos > right){
            right = pos;
            res.add(new ArrayList<>());
        }
        List<Integer> list = res.get(pos - left);
        list.add(root.val);
    }
}