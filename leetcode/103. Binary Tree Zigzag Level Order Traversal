/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /*
 3
15 , 7,9, 20
 15, 7, 9
 3, 2, 15, 7,
 
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        Deque<TreeNode> dq = new LinkedList<>();
        dq.add(root);
        travel(res, dq, 1, new ArrayList<>());
        return res;
        
    }
    
    public void travel(List<List<Integer>> res, Deque<TreeNode> dq, int next,  List<Integer> cur){
        while(dq.size() != 0){
            if(next > 0){
                int nextRound = 0;
                while(next-- > 0){
                    TreeNode node = dq.removeFirst();
                    cur.add(node.val);
                    if(node.left != null){
                        dq.addLast(node.left);
                        nextRound--;
                    }
                    if(node.right != null){
                        dq.addLast(node.right);
                        nextRound--;
                    }
                }
                res.add(cur);
                cur = new ArrayList<>();
                next = nextRound;
            }
            else{
                int nextRound = 0;
                while(next++ < 0){
                    TreeNode node = dq.removeLast();
                    cur.add(node.val);
                    if(node.right != null){
                        dq.addFirst(node.right);
                        nextRound++;
                    }
                    if(node.left != null){
                        dq.addFirst(node.left);
                        nextRound++;
                    }
                }
                res.add(cur);
                cur = new ArrayList<>();
                next = nextRound;
            }
            
        }
    }
}