class Solution {
    /*
    "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
  
  
  w e r t f
*/
    public String alienOrder(String[] words) {
        int[] dic = new int[26];
        boolean[] has = new boolean[26];
        HashSet<Character>[] successor = new HashSet[26];
        
        for(int i = 0; i < words.length; i++){
            if(i > 0)
                compare(dic, successor, words[i - 1], words[i]);
            String s = words[i];
            for(int j = 0; j < s.length(); j++)
                has[s.charAt(j) - 'a'] = true;
        }
        
        StringBuilder sb = new StringBuilder();
        Queue<Integer> q = new LinkedList<>();
        int count = 0;
        for(int i = 0; i < 26; i++){
            if(has[i]){
                if(dic[i] == 0)
                    q.offer(i);
                else
                    has[i] = false;
                count++;
            }
        }
        
        
        while(!q.isEmpty()){
            int ready = q.poll();
            sb.append( (char)(ready + 'a'));
            //System.out.println(sb.toString() + "  " + count);
            has[ready] = true;
            count--;
            HashSet<Character> list = successor[ready];
            if(list == null) continue;
            for(Character c: list){
                //System.out.println((char)(ready + 'a') + ": " + c);
                if(has[c - 'a']) return "";
                if(--dic[c - 'a'] == 0)
                    q.offer(c - 'a');
            }
        }
        
        return count != 0 ? "":sb.toString();
        
    }
    
    public void compare(int[] dic, HashSet<Character>[] successor, String a, String b){
        int l1 = a.length();
        int l2 = b.length();
        int l = Math.min(l1, l2);
        for(int i = 0; i < l; i++){
            char aa = a.charAt(i);
            char bb = b.charAt(i);
            if(aa != bb){
                if(successor[aa - 'a'] == null)
                    successor[aa - 'a'] = new HashSet<>();
                if(successor[aa - 'a'].add(bb))
                    dic[bb - 'a']++;
                //System.out.println(aa + "> " + bb);
                return;
            }
        }
        
    }
}