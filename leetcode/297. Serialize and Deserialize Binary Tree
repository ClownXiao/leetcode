/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        dfs(root, sb);
        System.out.println(sb.toString());
        return sb.toString();
    }
    
    public void dfs(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append("#/");
        }
        else{
            sb.append(root.val + "/");
            dfs(root.left, sb);
            dfs(root.right, sb);
        }
    }

    public int i;
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] nodes = data.split("/");
        i = 0;
        return deDfs(nodes);
    }
    
    public TreeNode deDfs(String[] nodes){
        if(nodes[i].equals("#")){
            i++;
            return null;
        } 
        else{
            TreeNode node = new TreeNode(Integer.valueOf(nodes[i++]));
            node.left = deDfs(nodes);
            node.right = deDfs(nodes);
            return node;
            
        }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));