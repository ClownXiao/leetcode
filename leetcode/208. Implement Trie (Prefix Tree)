class TrieNode {
    // Initialize your data structure here.
    public TrieNode[] children;
    public boolean end;
    
    public TrieNode() {
        children = new TrieNode[26];
        end = false;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode t = root;
        for(int i = 0; i < word.length(); i++){
            int x = word.charAt(i) - 'a';
            if(t.children[x] == null)
                t.children[x] = new TrieNode();
            t = t.children[x];
        }
        t.end = true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode t = root;
        for(int i = 0; i < word.length(); i++){
            int x = word.charAt(i) - 'a';
            if(t.children[x] == null)
                return false;
            t = t.children[x];
        }
        return t.end;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode t = root;
        for(int i = 0; i < prefix.length(); i++){
            int x = prefix.charAt(i) - 'a';
            if(t.children[x] == null)
                return false;
            t = t.children[x];
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");