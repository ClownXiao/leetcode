class Trie {

    /** Initialize your data structure here. */
    class Node{
        public boolean isWord;
        public Node[] children;
        public Node(){
            isWord = false;
            children = new Node[26];
        }
    }
    
    Node root;
    public Trie() {
        root = new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node node = root;
        for(char c: word.toCharArray()){
            if(node.children[c - 'a'] == null)
                node.children[c - 'a']  = new Node();
            node = node.children[c - 'a'];
        }
        node.isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node node = root;
        for(char c: word.toCharArray()){
            if(node.children[c - 'a'] == null)
                return false;
            node = node.children[c - 'a'];
        }
        return node.isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node node = root;
        for(char c: prefix.toCharArray()){
            if(node.children[c - 'a'] == null)
                return false;
            node = node.children[c - 'a'];
        }
        if(node.isWord) return true;
        else{
            for(Node n:  node.children)
                if(n != null) return true;
        }
        return false;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */