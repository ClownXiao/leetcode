class Solution {
    public List<String> addOperators(String num, int target) {
        //HashMap<Integer, List<String>> map = new HashMap<>();
        List<String> res = new ArrayList<>();
        dfs(res, num, target, "", 0, 0, 0);
        return res;
    }
            
    public void dfs(List<String> res, String num, int target, String sb, long sum, long lastOP, int pos ){
        if(pos == num.length() && sum == target){
            res.add(sb);
            return;
        }
        for(int i = pos; i < num.length(); i++){
            if(i != pos && num.charAt(pos) == '0') break;
            long cur = Long.valueOf(num.substring(pos, i + 1));
            if(pos == 0)
                dfs(res, num, target, sb + cur, cur, cur, i + 1);
            else{
                dfs(res, num, target, sb + '+' + cur, sum + cur, cur, i + 1);
                dfs(res, num, target, sb + '-' + cur, sum - cur, -cur, i + 1);
                dfs(res, num, target, sb + '*' + cur, sum - lastOP + lastOP * cur, cur * lastOP, i + 1);
            }
        }
        
    }
}