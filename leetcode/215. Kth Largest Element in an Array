public class Solution {
    public int findKthLargest(int[] nums, int k) {
<<<<<<< HEAD
        if(nums.length < 2) return nums[0];
        return kth(nums, 0, nums.length-1, k);
    }
    
    public int kth(int[] a, int l, int h, int k){
        int i = l;
        int j = h;
        int thsd = a[h];
        int temp;
        while(i < j){
            if(a[i++] < thsd){
                i--;
                j--;
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        a[h] = a[i];
        a[i] = thsd;
        
        int m = i-l+1;
        if(m == k)
            return thsd;
        else if(m > k)
            return kth(a, l, i-1, k);
        else
            return kth(a, i+1, h, k-m);
=======
        return qc(nums, 0, nums.length-1, k);
    }
    
    public int qc(int[] a,int l, int h, int k ){
        //System.out.println(l);
        //System.out.println(h);
        int len = h;
        int t = a[l];
        while(l < h){
            while(a[h] <= t && l < h) h--;
            a[l] = a[h];
            a[h] = t;
            while(a[l] >= t && l < h ) l++;
            a[h] = a[l];
            a[l] = t;
        }
        if(l == k - 1)
            return a[l];
        else if(l > k-1)
            return qc(a, 0, l - 1, k);
        else
            return qc(a, l+1, len, k);
        
>>>>>>> 6e4d1d48aef99a3634c1eee9ef4b123e24e99e4d
    }
}