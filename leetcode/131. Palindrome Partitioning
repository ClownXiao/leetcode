public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        dfs(res, s, 0, new ArrayList<>());
        return res;
    }
    
    public void dfs( List<List<String>> res, String s, int start, List<String> cur){
        if(start == s.length()){
            res.add(new ArrayList<>(cur));
            return;
        }
        for(int i = start + 1; i <= s.length();i++){
            String sub = s.substring(start, i);
            if(isP(sub)){
                cur.add(sub);
                dfs(res, s, i, cur);
                cur.remove(cur.size() - 1);
            }
        }
    }
    
    public boolean isP(String s){
        int start = 0;
        int end = s.length() - 1;
        while(start < end){
            if(s.charAt(start++) == s.charAt(end--))
                continue;
            else
                return false;
        }
        return true;
    }
}