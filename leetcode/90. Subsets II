class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        dfs(res, new ArrayList<>(), 0, nums);
        return res;
    }
    
    public void dfs(List<List<Integer>> res, List<Integer> cur, int i, int[] nums){
        if(i == nums.length){
            res.add(new ArrayList(cur));
            return;
        }
        
        int k = nums[i];
        int j = i + 1;
        //how many same k
        while(j < nums.length && nums[j] == k) j++;
        //add one by one
        int z = 0;
        while(i++ < j){
            dfs(res, cur, j, nums);
            cur.add(k);
            z++;
        }
        dfs(res, cur, j, nums);
        //delete one by one
        while(z-- > 0){
            cur.remove(cur.size() - 1);
        }
        
    }
}