/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        if(root == null) return res;
        sb.append(root.val);
        if(root.left != null) 
            travel(root.left, sb, res);
        if(root.right != null)
            travel(root.right, sb, res);
        if(root.left == null && root.right == null){
            res.add(sb.toString());
        }
        return res;
    }
    
    public void travel(TreeNode p, StringBuilder sb,  List<String> res){
        String x = "->" + p.val ;
        sb.append(x) ;
        if(p.left == null && p.right == null){
            res.add(sb.toString());
            //System.out.println(sb.toString());
            sb.delete(sb.length()-x.length(), sb.length());
            //System.out.println(sb.toString());
            return;
        }
        if(p.left != null){
            travel(p.left, sb, res);
        }
        if(p.right != null){
            travel(p.right, sb, res);
        }
        sb.delete(sb.length()-x.length(), sb.length());
        return;
    }
}