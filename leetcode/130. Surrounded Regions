public class Solution {
    public class Tuple{
        public int y;
        public int x;
        public Tuple(int y, int x){
            this.y = y;
            this.x = x;
        }
    }
    
    int[] xx = {0, 0, 1, -1};
    int[] yy = {1, -1, 0, 0};
    public void solve(char[][] board) {
        Queue<Tuple> q = new LinkedList<Tuple>();
        int m = board.length;
        if(m == 0) return;
        int n = board[0].length;
        for(int i = 0; i < m; i++){
            if(board[i][0] == 'O') q.offer(new Tuple(i,0));
            if(board[i][n - 1] == 'O') q.offer(new Tuple(i,n - 1));
        }
        for(int j = 1; j < n - 1; j++){
            if(board[0][j] == 'O') q.offer(new Tuple(0,j));
            if(board[m-1][j] == 'O') q.offer(new Tuple(m-1, j));
        }
        
        while(!q.isEmpty()){
            Tuple t = q.poll();
            board[t.y][t.x] = '1';
            for(int i = 0; i < 4; i++){
                int ni = t.y + yy[i];
                int nj = t.x + xx[i];
                if(ni > 0 && ni < m && nj > 0 && nj < n && board[ni][nj] == 'O')
                    q.offer(new Tuple(ni, nj));
            }
        }
        
        for(int i = 0; i < m ; i++){
            for(int j = 0; j < n ; j++){
                if(board[i][j] == 'O') board[i][j] = 'X';
                else if(board[i][j] == '1') board[i][j] = 'O';
            }
        }
    }
}