/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        TreeLinkNode last = root;
        while(last != null){
            TreeLinkNode cur = last;
            while(cur != null){
                if(cur.left != null){
                    if(cur.right != null)
                        cur.left.next = cur.right;
                    
                    else
                        cur.left.next = findNext(cur);
                }
                if(cur.right != null){
                    cur.right.next = findNext(cur);
                }
                cur = cur.next;
            }
            last = findPre(last);
        }
    }
    
    public TreeLinkNode findNext(TreeLinkNode cur){
        TreeLinkNode next = cur.next;
        if(next == null) return null;
        if(cur.next.left != null) return cur.next.left;
        else if(cur.next.right != null) return cur.next.right;
        else return findNext(cur.next);
    }
    
    public TreeLinkNode findPre(TreeLinkNode cur){
        if(cur.left != null)
            return cur.left;
        else if(cur.right != null)
            return cur.right;
        else return findNext(cur);
    }
}