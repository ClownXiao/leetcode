class Solution {
    int[] ii = {0, 0, 1, -1};
    int[] jj = {1, -1, 0, 0};
    
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        int[] source = new int[m * n];
        Arrays.fill(source, -1);
        int res = 0;
        List<Integer> resList = new ArrayList<>();
        for(int[] p: positions){
            res++;
            int l = p[0] * n + p[1];
            source[l] = l;
            int root = l;
            
            for(int i = 0; i < 4; i++){
                int x = p[0] + ii[i];
                int y = p[1] + jj[i];
                int id = x * n + y;
                
                if(x < 0 || x >= m || y < 0 || y >= n || source[id] == -1)
                    continue;
                int neigh = find(source, id);
                if(root != neigh){
                    res--;
                    
                    source[root] = neigh;
                    root = neigh;
                }
            }
            resList.add(res);
            
        }
        return resList;
    }
    
    public int find(int[] source, int id){
        while(source[id] != id) id = source[id];
        return id;
    }
}