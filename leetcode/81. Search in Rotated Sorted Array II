public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums.length == 0) return false;
        int offset = findPivot(nums);
        int l = 0;
        int h = nums.length - 1;
        while(l <= h){
            int mid = (l + h) / 2;
            int realMid = (mid + offset) % nums.length;
            
            //System.out.println(realMid);
            if(nums[realMid] < target){
                while(mid < h && nums[((mid + 1 + offset) % nums.length)] == nums[realMid]){
                    mid++;
                    realMid = (mid + offset) % nums.length;
                }
                l = mid + 1;
            }
            else if(nums[realMid] > target){
                while(mid > l && nums[((mid - 1 + offset) % nums.length)] == nums[realMid]){
                    mid--;
                    realMid = (mid + offset) % nums.length;
                }
                    
                h = mid - 1;
            }
            else
                return true;
        }
        
        return false;
    }
    
    public int findPivot(int[] nums){
        int l = 0;
        int h = nums.length - 1;
        while(l < h){
            if(nums[h] > nums[l])
                break;
            int mid = (l + h) / 2;
            if(nums[mid] >= nums[l])
                l = mid + 1;
            else
                h = mid;
        }
        while(l > 0 && nums[l-1] == nums[l])
            l--;
        //System.out.println(l);
        return l;
    }
    
}